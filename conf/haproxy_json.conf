<?php

/* HAProxy version >= 2.x
   This file holds the arrays required to help make some data-fields understandable.
   IntCounter
   LongCounter
   StringEvent
   IntRate

*/

// Data type array definition
$haproxy_type= array( "u32" => "Int",
                      "u64" => "Long",
                      "s32" => "String",
                      "str" => "String"
);


// Data nature and how it is handled.
$haproxy_nature= array( "Gauge" => "Counter",
                        "Max" => "Counter",
                        "Limit" => "StringEvent",
                        "Counter" => "Counter",
                        "Rate" => "Rate",
                        "Name" => "StringEvent",
                        "Age" => "StringEvent",
                        "Avg" => "Average"
);

// Origin of data - what to use and what to skip
$haproxy_origin= array( "Config" => "false",
                        "Key" => "false",
                        "Metric" => "true",
                        "Status" => "true"
);


// Description array.

// In case you want to group the metrics, and provide a decent
// description, add the metric name here with the provided description
// as to be appended to the metric path.
// By default - a "|metricscope:entryname" is used.
$apmia_desc = array("pxname =" => "String",
                   "svname" => "String",
                   "qcur" => "|Queue:Current queued requests", // current queued requests. For the backend this reports the number queued without a server assigned.
                   "qmax" => "|Queue:Max current queued requests", // max value of qcur
                   "scur" => "|Queue:Current sessions", // current sessions
                   "smax" => "|Sessions:Max sessions", // max sessions
                   "slim" => "|Sessions:Configured session limit", // configured session limit
                   "stot" => "|Sessions:Total sessions", // cumulative number of sessions
                   "bin" => "|Bytes:Bytes in", // Bytes in
                   "bout" => "|Bytes:Bytes out", // Bytes out
                   "dreq" => "|Denied:Requests denied", // requests denied because of security concerns.
                   "dresp" => "|Denied:Responses denied", // responses denied because of security concerns.
                   "ereq" => "|Errors:Request errors", // request errors.
                   "econ" => "|Errors:Errors during connection to backend", // number of requests that encountered an error trying to connect to a backend server.
                   "eresp" => "|Errors:Response errors", // response errors. srv_abrt will be counted here also.
                   "wretr" => "|Warnings:Nr connection retries", //  number of times a connection to a server was retried.
                   "wredis" => "|Warnings:Nr connections rerouted", // number of times a request was redispatched to another server
                   "status" => "|Server:Status", // status (UP/DOWN/NOLB/MAINT/MAINT(via)/MAINT(resolution)...)
                   "weight" => "|Server:Server weight", // total weight (backend), server weight (server)
                   "act" => "|Server:Active servers", // number of active servers (backend), server is active (server)
                   "bck" => "|Server:Backup servers", // number of backup servers (backend), server is backup (server)
                   "chkfail" => "|Server:Failed server check", // number of failed checks. (Only counts checks failed when the server is up.)
                   "chkdown" => "|Server:Up-Down transitions", // number of UP->DOWN transitions.
                   "lastchg" => "|Server:Seconds since last Up-Down transition", // number of seconds since the last UP<->DOWN transition
                   "downtime" => "|Server:Total downtime", // total downtime (in seconds).
                   "qlimit" => "|Queue:Configure queue limit", // configured maxqueue for the server, or nothing in the value is 0
                   "pid" => "|Server:Instance ID", // process id (0 for first instance, 1 for second, ...)
                   "iid" => "|Server:Unique proxy ID", // unique proxy id
                   "sid" => "|Server:Unique server ID", // server id (unique inside a proxy)
                   "throttle" => "|Server:Throttle percentage", // current throttle percentage for the server
                   "lbtot" => "|Server:Cnt server was selected", // total number of times a server was selected
                   "tracked" => "|Server:ID of proxy", // id of proxy/server if tracking is enabled.
                   "type" => "|Server:Server type", // (0=frontend, 1=backend, 2=server, 3=socket/listener)
                   "rate" => "|Session rate:Nr sessions during last second", // number of sessions per second over last elapsed second
                   "rate_lim" => "|Session rate:Conf session limit per sec.", // configured limit on new sessions per second
                   "rate_max" => "|Session rate:Max session per sec.", // max number of new sessions per second
                   "check_status" => "|Server:Status", // status of last health check
                   "check_code" => "|Server:Layer 5-7 code", // layer5-7 code, if available
                   "check_duration" => "|Server:Health check duration", // time in ms took to finish last health check
                   "hrsp_1xx" => "|Responses:http responses with 1xx code", // http responses with 1xx code
                   "hrsp_2xx" => "|Responses:http responses with 2xx code", // http responses with 2xx code
                   "hrsp_3xx" => "|Responses:http responses with 3xx cod", // http responses with 3xx code
                   "hrsp_4xx" => "|Responses:http responses with 4xx code", // http responses with 4xx code
                   "hrsp_5xx" => "|Responses:http responses with 5xx code", // http responses with 5xx code
                   "hrsp_other" => "|Errors:Protocol errors", // http responses with other codes (protocol error)
                   "hanafail" => "|Server:Failed health check", // failed health checks details
                   "req_rate" => "|Requests:HTTP req. per last second", // HTTP requests per second over last elapsed second
                   "req_rate_max" => "|Requests:Max HTTP req per sec. seen", // max number of HTTP requests per second observed
                   "req_tot" => "|Requests:Total HTTP requests", // total number of HTTP requests received
                   "cli_abrt" => "|Requests:Client aborted transfers", // number of data transfers aborted by the client
                   "srv_abrt" => "|Server:Server aborted transfers", // number of data transfers aborted by the server
                   "comp_in" => "|Bytes:Bytes to the compressor", // number of HTTP response bytes fed to the compressor
                   "comp_out" => "|Bytes:Bytes emitted by compressor", // number of HTTP response bytes emitted by the compressor
                   "comp_byp" => "|Bytes:Bytes bypassing compressor", // number of bytes that bypassed the HTTP compressor (CPU/BW limit)
                   "comp_rsp" => "|Responses:Nr compressed HTTP responses", // number of HTTP responses that were compressed
                   "lastsess" => "|Sessions:Last session assigned (s)", // number of seconds since last session assigned to server/backend
                   "last_chk" => "|Server:Last health error message", // last health check contents or textual error
                   "last_agt" => "|Server:Last agent error message", // last agent check contents or textual error
                   "qtime" => "|Queue:Average queue time (ms)", // the average queue time in ms over the 1024 last requests
                   "ctime" => "|Requests:Average connect time (ms)", // the average connect time in ms over the 1024 last requests
                   "rtime" => "|Responses:Average response time (ms)", // the average response time in ms over the 1024 last requests
                   "ttime" => "|Sessions:Average total session time (ms)", // the average total session time in ms over the 1024 last
                   "agent_status" => "|Agent:Agent status", // status of last agent check
                   "agent_code" => "|Agent:String", // numeric code reported by agent if any (unused for now)
                   "agent_duration" => "|Agent:Agent check time (ms)", // time in ms taken to finish last check
                   "check_desc" => ":Agent check status", // short human-readable description of check_status
                   "agent_desc" => ":Agent description", // short human-readable description of agent_status
                   "check_rise" => "|Server:Server rise params", // server's "rise" parameter used by checks
                   "check_fall" => "|Server:Server fall params", // server's "fall" parameter used by checks
                   "check_health" => "|Server:Server health value", // server's health check value between 0 and rise+fall-1
                   "agent_rise" => "|Agent:Agent rise params", // agent's "rise" parameter, normally 1
                   "agent_fall" => "|Agent:Agent fall params", // agent's "fall" parameter, normally 1
                   "agent_health" => "|Agent:Agent health param", // agent's health parameter, between 0 and rise+fall-1
                   "addr" => "|Generic:Address", // address:port or "unix". IPv6 has brackets around the address.
                   "cookie" => "|Generoc:Server cookie", // server's cookie value or backend's cookie name
                   "mode" => ":Proxy mode", // proxy mode (tcp, http, health, unknown)
                   "algo" => ":LB algorithm", // load balancing algorithm
                   "conn_rate" => "|Generic:Nr connections per sec.", // number of connections over the last elapsed second
                   "conn_rate_max" => "|Generic:Highest connection rate", // highest known conn_rate
                   "conn_tot" => "|Generic:Total connections", // cumulative number of connections
                   "intercepted" => "|Generic:Intercepted connections", // cum. number of intercepted requests (monitor, stats)
                   "dcon" => "|Generic:Tcp-connection denied", // requests denied by "tcp-request connection" rules
                   "dses" => "|Generic:Tcp-session denied", // requests denied by "tcp-request session" rules
);


// Exclusion array.

// As haproxy 2.x adds different new metrics and provides the names,
// we can instruct the poller to not send specific ones.
// By default we remove the px/sv name. As these are used in the
// metric path anyway.
$apmia_send = array("pxname" => "false",
                    "svname" => "false"
);

?>
